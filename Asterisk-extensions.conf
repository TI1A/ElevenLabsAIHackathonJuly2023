

[from-external]
exten => s,1,Answer()
    same => Set(AUDIOFILE=) ; Set AUDIOFILE to an empty string at the beginning of the call
    same => n,Set(ExtID=${RAND(1000000,9999999)}) ; Generate and save random ExtID
    same => n,Set(TIMEOUT(absolute)=300) ; Set the total timeout for the entire call to 300 seconds (5 minutes)
    same => n,Set(FIRST=true)

    ; Loop to execute the node command and play the audio file until the call is active
    same => n(start_loop),NoOp(Starting the loop)
    ;same => n,ExecIf($["${FIRST}" = "true"]?Set(FIRST=false))
    ; Uncomment the following line if you want to stop the loop when the channel is up
    ; same => n,ExecIf($["${CHANNEL(state)}" = "Up"]?goto(stop_loop))

    same => n,System(/usr/bin/node /agency/build/main.js /agency/settings.json ${ExtID} ${IF($["${FIRST}" = "false"]?/var/lib/asterisk/sounds/FILENAME_${ExtID}.wav)} > /tmp/node_output_${ExtID}.txt) ; Execute the node command and redirect stdout to a temporary file
    same => n,Set(AUDIOFILE_OUTPUT=${SHELL(grep 'speech[0-9]*' /tmp/node_output_${ExtID}.txt | tr -d '\n')}) ; Read the extracted filename from the temporary file into AUDIOFILE_OUTPUT
    same => n,System(ffmpeg -i /${AUDIOFILE_OUTPUT} -ar 8000 /var/lib/asterisk/sounds/en/${AUDIOFILE_OUTPUT}.gsm > /output)
    same => n,Background(${AUDIOFILE_OUTPUT})
    same => n,Record(FILENAME_${ExtID}.wav,2,30) ; Record up to 30 seconds of audio or 2 seconds of silence, file will be saved with a unique name based on ExtID
    same => n,Set(FIRST=false) ; Set FIRST to false right before going back to start_loop
    same => n,Goto(start_loop) ; Go back to start_loop to continue the process

    ; Stop the loop and end the call when necessary
    same => n(stop_loop),NoOp(Stopping the loop)
    same => n,Hangup()